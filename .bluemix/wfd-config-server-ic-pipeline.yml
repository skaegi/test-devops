---
stages:
- name: Build Java Projects
  inputs:
  - type: git
    branch: ${BRANCH}
    service: ${REPO}
  triggers:
  - type: commit
  properties:
  - name: DOCKER_DIR
    value: ${DOCKER_DIR}
    type: text
  - name: BUILD_TARGET
    value: ${BUILD_TARGET}
    type: text
  jobs:
  - name: Build Java
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
        #!/bin/bash
        echo "Run gradle build..."
        export JAVA_HOME=~/java8
        export PATH=$JAVA_HOME/bin:$PATH
        /bin/bash build-microservice.sh
        cp ${BUILD_TARGET} ${DOCKER_DIR}/app.jar
        ls -al $PWD
        echo "Gradle build complete."

- name: Build Docker Image
  inputs:
  - type: job
    stage: Build Java Projects
    job: Build Java
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: LABEL_PREFIX
    value: ${LABEL_PREFIX}
    type: text
  - name: DOCKER_DIR
    value: ${DOCKER_DIR}
    type: text
  - name: REGION
    value: ${REGION}
    type: text
  - name: ORG
    value: ${ORG}
    type: text
  - name: SPACE
    value: ${SPACE}
    type: text
  - name: NAME
    value: ${NAME}
    type: text
  jobs:
  - name: Build container
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${NAME}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
      #!/bin/bash
        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"
        cd ${WORKSPACE}/${DOCKER_DIR}
        # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
        #####################
        # Run unit tests    #
        #####################
        log_and_echo "$LABEL" "No unit tests cases have been checked in"
        ######################################
        # Build Container via Dockerfile     #
        ######################################
        # REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${LABEL_PREFIX}${APPLICATION_VERSION}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.
        if [ -f Dockerfile ]; then
            log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
            ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
            # build image
            BUILD_COMMAND=""
            if [ "${USE_CACHED_LAYERS}" == "true" ]; then
                BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/${DOCKER_DIR}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            else
                BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/${DOCKER_DIR}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            fi
            if [ $RESULT -ne 0 ]; then
                log_and_echo "$ERROR" "Error building image"
                ice_retry info
                ice_retry images
                ${EXT_DIR}/print_help.sh
                ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
                exit 1
            else
                log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
                ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
            fi
        else
            log_and_echo "$ERROR" "Dockerfile not found in project"
            ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
            exit 1
        fi

        ######################################################################################
        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        ######################################################################################
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
